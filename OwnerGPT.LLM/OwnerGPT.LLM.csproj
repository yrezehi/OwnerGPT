<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net6.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <AllowUnsafeBlocks>True</AllowUnsafeBlocks>

	<DefineConstants Condition="'$(OS)' == 'Windows_NT'">WINDOWS</DefineConstants>
	<DefineConstants Condition="$([System.String]::new('$(OS)').StartsWith('Unix'))">LINUX</DefineConstants>
  </PropertyGroup>

	<!--<Target Name="CMakePrepareForBuild" BeforeTargets="PrepareForBuild;Clean">
		<PropertyGroup Condition="'$(OS)' == 'Windows_NT'">
			<Test>$(VsInstallRoot)</Test>
			<CMakeBin Condition="Exists('$(Test)')">"$(VsInstallRoot)\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\cmake.exe"</CMakeBin>
			<CMakeBin Condition="!Exists('$(Test)')">"$([System.IO.Path]::GetFullPath('$(VS170COMNTOOLS)\..\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\cmake.exe'))"</CMakeBin>
		</PropertyGroup>
		<PropertyGroup Condition="'$(OS)' != 'Windows_NT'">
			<CMakeBin>cmake</CMakeBin>
		</PropertyGroup>
		<PropertyGroup>
			<CMakeProject>$([System.IO.Path]::GetFullPath('$(MSBuildProjectDirectory)\Native\llama.cpp'))</CMakeProject>
		</PropertyGroup>
	</Target>-->

	<!--<Target Name="CMakeConfigure" BeforeTargets="Build">
		<PropertyGroup>
			<CMakeCompilerFlags Condition="'$(OS)' == 'Windows_NT'">-DCMAKE_CXX_FLAGS="/W0 /EHsc /w /D _MBCS" -DCMAKE_C_FLAGS="/W0 /w"</CMakeCompilerFlags>
			<CMakeCompilerFlags Condition="$([System.String]::new('$(OS)').StartsWith('Unix'))">-DCMAKE_CXX_FLAGS=-w -DCMAKE_C_FLAGS=-w</CMakeCompilerFlags>
		</PropertyGroup>
		<Exec Command='$(CMakeBin) -DLLAMA_CUBLAS=ON -DLLAMA_CUDA_FORCE_DMMV=ON -DLLAMA_CUDA_DMMV_X=64 -DLLAMA_CUDA_MMV_Y=2 -DLLAMA_ALL_WARNINGS=OFF -DLLAMA_BUILD_TESTS=OFF -DBUILD_SHARED_LIBS=ON -S "$(CMakeProject)" -B "$(CMakeProject)" $(CMakeCompilerFlags)' />
	</Target>-->

	<!--<Target Name="CMakeBuild" AfterTargets="CMakeConfigure">
		<Exec Command='$(CMakeBin) -VOID-build "$(CMakeProject)" -j8 -VOID-config $(Configuration)' />
	</Target>-->

	<!--<Target Name="CMakeCopyOutput" AfterTargets="CMakeBuild">
		<PropertyGroup>
			<LibraryFileExtension Condition="'$(OS)' == 'Windows_NT'">*.dll</LibraryFileExtension>
			<LibraryFileExtension Condition="$([System.String]::new('$(OS)').StartsWith('Unix'))">lib*.so</LibraryFileExtension>
		</PropertyGroup>
		<ItemGroup>
			<LibraryFiles Include="$(CMakeProject)/bin/$(Configuration)/$(LibraryFileExtension)" />
			<LibraryFiles Include="$(CMakeProject)/$(LibraryFileExtension)" />
		</ItemGroup>
		<Copy SourceFiles="@(LibraryFiles)" DestinationFolder="$(SolutionDir)/$(Platform)/$(Configuration)/$(MSBuildProjectName)" />
	</Target>-->

  <ItemGroup>
    <None Remove="PromptEnginnering\Prompts\GENERIC_ASSISTANT.txt" />
    <None Remove="PromptEnginnering\Prompts\QUESTION_ANSWER.txt" />
    <None Remove="PromptEnginnering\Prompts\SUMMARIZE.txt" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="LLamaSharp" Version="0.5.1" />
    <PackageReference Include="LLamaSharp.Backend.Cpu" Version="0.5.1" />
  </ItemGroup>

  <ItemGroup>
    <Page Include="PromptEnginnering\Prompts\GENERIC_ASSISTANT.txt" />
    <Page Include="PromptEnginnering\Prompts\QUESTION_ANSWER.txt" />
    <Page Include="PromptEnginnering\Prompts\SUMMARIZE.txt" />
  </ItemGroup>

  <ItemGroup>
    <Content Include="PromptEnginnering\Prompts\\**\*.*">
	    <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\OwnerGPT.Models\OwnerGPT.Models.csproj" />
  </ItemGroup>

</Project>
