@{
    ViewData["Title"] = "Chat";
}

<div class="relative rounded-lg overflow-hidden shadow-lg bg-white h-full">
    <div class="sticky top-0 z-50 bg-[#f2f2f2] border-b border-gray-300 py-5 px-8 text-left text-gray-800">
        <h3 class="inline-block py-1 text-left"><span class="text-indigo-600">Agent #5235</span> - External Portal</h3>
    </div>
    <div id="chat-dialog-container" class="relative flex-grow px-8 pt-8 text-left text-gray-700 mb-[5rem]">
        @await Html.PartialAsync("Chat/Replay/_UserReplay", "Hi you!")

        @await Html.PartialAsync("Chat/Replay/_SystemReplay", "Hi!")
    </div>
    <div class="absolute w-[100%] bottom-0 text-left text-gray-700 p-4">
        <form id="dialog-form">
            <label for="chat" class="sr-only">Your message</label>
            <div class="flex items-center px-3 py-2 bg-gray-100 rounded-lg">
                <button type="button" class="inline-flex justify-center p-2 text-gray-500 rounded-lg cursor-pointer hover:text-gray-900 hover:bg-gray-100">
                    <svg class="w-5 h-5 text-gray-600" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 12 20">
                        <path stroke="currentColor" stroke-linejoin="round" stroke-width="2" d="M1 6v8a5 5 0 1 0 10 0V4.5a3.5 3.5 0 1 0-7 0V13a2 2 0 0 0 4 0V6" />
                    </svg>
                    <span class="sr-only">Upload image</span>
                </button>
                <!-- <textarea id="chat-input" rows="1" class="block min-h-[75px] resize-none mx-4 p-2.5 w-full text-sm text-gray-900 bg-white rounded-lg border-0 focus:ring-blue-500 focus:border-blue-500" placeholder="Your message..."><textarea/>-->

                <!--<textarea id="chat-input" rows="1" class="block min-h-[75px] resize-none mx-4 p-2.5 w-full text-sm text-gray-900 bg-white rounded-lg border-0 focus:ring-blue-500 focus:border-blue-500" placeholder="Your message...">
                     
                    <div class="max-w-sm p-6 bg-white border border-gray-200 rounded-lg shadow dark:bg-gray-800 dark:border-gray-700">
                        <svg class="w-7 h-7 text-gray-500 dark:text-gray-400 mb-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                            <path d="M18 5h-.7c.229-.467.349-.98.351-1.5a3.5 3.5 0 0 0-3.5-3.5c-1.717 0-3.215 1.2-4.331 2.481C8.4.842 6.949 0 5.5 0A3.5 3.5 0 0 0 2 3.5c.003.52.123 1.033.351 1.5H2a2 2 0 0 0-2 2v3a1 1 0 0 0 1 1h18a1 1 0 0 0 1-1V7a2 2 0 0 0-2-2ZM8.058 5H5.5a1.5 1.5 0 0 1 0-3c.9 0 2 .754 3.092 2.122-.219.337-.392.635-.534.878Zm6.1 0h-3.742c.933-1.368 2.371-3 3.739-3a1.5 1.5 0 0 1 0 3h.003ZM11 13H9v7h2v-7Zm-4 0H2v5a2 2 0 0 0 2 2h3v-7Zm6 0v7h3a2 2 0 0 0 2-2v-5h-5Z" />
                        </svg>
                        <a href="#">
                            <h5 class="mb-2 text-2xl font-semibold tracking-tight text-gray-900 dark:text-white">Need a help in Claim?</h5>
                        </a>
                        <p class="mb-3 font-normal text-gray-500 dark:text-gray-400">Go to this step by step guideline process on how to certify for your weekly benefits:</p>
                        <a href="#" class="inline-flex items-center text-blue-600 hover:underline">
                            See our guideline
                        <svg class="w-3 h-3 ml-2.5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 18 18">
                            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11v4.833A1.166 1.166 0 0 1 13.833 17H2.167A1.167 1.167 0 0 1 1 15.833V4.167A1.166 1.166 0 0 1 2.167 3h4.618m4.447-2H17v5.768M9.111 8.889l7.778-7.778" />
                        </svg>
                        </a>
                    </div>

                </textarea>-->

                <div class="block h-[144px] mx-4 w-full text-sm text-gray-900 flex flex-col bg-white rounded-lg border-0">
                    <textarea class="resize-none min-h-[80px] p-2.5 w-full h-full rounded-lg border-0 focus:ring-0"></textarea>

                    <div class="flex p-2">

                        <div class="relative grow-0 max-w-sm p-1 px-2 bg-white border border-gray-200 rounded-lg shadow">
                            <div class="flex gap-1.5 mb-1">
                                <span class="text-xs font-semibold tracking-tight text-gray-900">anualreport.pdf</span>
                                <button type="button" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-sm text-sm w-3 h-3 ml-auto inline-flex justify-center items-center" data-modal-hide="staticModal">
                                    <svg class="w-2 h-2" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
                                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6" />
                                    </svg>
                                    <span class="sr-only">Close modal</span>
                                </button>
                            </div>
                            <p class="text-xs text-gray-500">32 KB</p>
                        </div>

                    </div>

                </div>

                <button id="chat-submit" type="button" class="inline-flex justify-center p-2 text-indigo-500 rounded-full cursor-pointer hover:bg-blue-100">
                    <svg class="w-5 h-5 rotate-90" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 18 20">
                        <path d="m17.914 18.594-8-18a1 1 0 0 0-1.828 0l-8 18a1 1 0 0 0 1.157 1.376L8 18.281V9a1 1 0 0 1 2 0v9.281l6.758 1.689a1 1 0 0 0 1.156-1.376Z" />
                    </svg>
                    <span class="sr-only">Send message</span>
                </button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script>

        var chatInputElement = document.querySelector("#chat-input");
        var chatDialogContainer = document.querySelector("#chat-dialog-container");
        var chatSubmitElement = document.querySelector("#chat-submit");
        var dialogFormElement = document.querySelector("#dialog-form");

        keyboard.enterToTrigger(chatInputElement, dialogSubmitHandler);
        keyboard.clickToSubmit(chatSubmitElement);

        // TODO: no!
        function createReplayElement() {
            var identifier = "dialog-" + Math.random().toString(36).slice(-6);

            chatDialogContainer.innerHTML += `
                                <div class="relative mb-6 text-left">
                                    <div class="text-gray-700">
                                        <div class="relative float-left inline-block rounded-md bg-gray-100 py-3 px-4">
                                            <p id="${identifier}" class="text-sm"></p>
                                        </div>
                                    </div>
                                    <div class="clear-both flex text-gray-700"></div>
                                </div>
                            `;

            return document.querySelector(`#${identifier}`);
        }

        function dialogSubmitHandler(event) {

            if (chatSubmitElement.disabled) return;

            if (!chatInputElement.value) {
                notification.information("Enter anything at least!");
                return;
            }

            var userInput = chatInputElement.value;

            chatInputElement.value = "";
            chatSubmitElement.disabled = true;

            partialViewLoader.appendTo("Chat/Replay/_UserReplay", userInput, chatDialogContainer)
                .then(_ => {
                    getStreamReplay(userInput);
                });

        }

        function getReplay(message) {
            var replayElement = createReplayElement();

            fetch("http://localhost:5027/api/GPT/Replay", {
                method: 'POST',
                headers: {
                    'Accept': 'application/json; charset=utf-8',
                    'Content-Type': 'application/json;charset=UTF-8'
                },
                body: JSON.stringify({
                    message: message,
                })
            }).then(response =>
                response.text()
            ).then(response => {
                replayElement.innerHTML += " " + response;
                chatSubmitElement.disabled = false;
            }).catch((error) => {
                chatSubmitElement.disabled = false;
                console.error(error);
            });
        }

        async function getStreamReplay(message) {
            var replayElement = createReplayElement();

            try {
                const response = await fetch("http://localhost:5027/api/GPT/StreamReplay", {
                    method: 'POST',
                    headers: {
                        'Accept': 'application/json; charset=utf-8',
                        'Content-Type': 'application/json;charset=UTF-8',
                        'Connection': 'keep-alive'
                    },
                    body: JSON.stringify({
                        message: message,
                    }),
                });

                const reader = response.body.getReader();
                while (true) {
                    const { done, value } = await reader.read();
                    var decodedValue = new TextDecoder().decode(value).trim();

                    replayElement.innerHTML += " " + decodedValue;

                    if (done) {
                        chatSubmitElement.disabled = false;
                        break;
                    }
                }
            } catch (error) {
                chatSubmitElement.disabled = false;
                console.log('error', error);
            }
        }

    </script>
}