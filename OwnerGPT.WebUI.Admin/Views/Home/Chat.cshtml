@{
    ViewData["Title"] = "Chat";
}

<div class="relative rounded-lg overflow-hidden shadow-lg bg-white h-full">
    <div class="sticky top-0 z-50 bg-[#f2f2f2] border-b border-gray-300 py-5 px-8 text-left text-gray-800">
        <h3 class="inline-block py-1 text-left"><span class="text-indigo-600 font-bold">Agent #5235</span> - External Portal</h3>
    </div>
    <div id="chat-dialog-container" class="relative flex-grow px-8 pt-8 text-left text-gray-700 mb-[5rem]">
        @await Html.PartialAsync("Chat/Replay/_UserReplay", "Hi you!")

        @await Html.PartialAsync("Chat/Replay/_SystemReplay", "Hi!")
    </div>
    <div class="absolute w-[100%] bottom-0 text-left text-gray-700 p-4">
        <form id="dialog-form">
            <label for="chat" class="sr-only">Your message</label>
            <div class="flex items-center pr-3 py-2 bg-gray-100 rounded-lg border-[1px] border-gray-200">
               
                <div class="block h-[144px] mx-4 w-full text-sm text-gray-900 flex flex-col bg-white rounded-lg border-gray-100 border-[1px]">
                    <textarea id="chat-input" class="resize-none hide-scrollbar min-h-[80px] p-2.5 w-full h-full rounded-lg border-0 focus:ring-0"></textarea>
                    <div id="attachments-container" class="flex p-2"></div>
                </div>

                <div class="flex flex-col">
                    <div class="inline-flex justify-center p-2 text-gray-500 rounded-lg cursor-pointer hover:text-gray-900 hover:bg-gray-100">
                        <label class="flex flex-col items-center p-2 bg-white rounded-lg shadow-md tracking-wide border border-blue cursor-pointer">
                            <svg class="w-5 h-5" fill="currentColor" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                                <path d="M16.88 9.1A4 4 0 0 1 16 17H5a5 5 0 0 1-1-9.9V7a3 3 0 0 1 4.52-2.59A4.98 4.98 0 0 1 17 8c0 .38-.04.74-.12 1.1zM11 11h3l-4-4-4 4h3v3h2v-3z" />
                            </svg>
                            <input id="attachment-input" type='file' class="hidden" multiple />
                        </label>
                    </div>
                    <div class="inline-flex justify-center p-2 text-gray-500 rounded-lg cursor-pointer hover:text-gray-800 hover:bg-gray-100">
                        <div class="bg-white rounded-lg shadow-md tracking-wide border border-blue cursor-pointer">
                            <button id="chat-submit" type="button" class="inline-flex justify-center p-2 text-indigo-500 rounded-full cursor-pointer hover:text-indigo-900">
                                <svg class="w-5 h-5 rotate-90" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 18 20">
                                    <path d="m17.914 18.594-8-18a1 1 0 0 0-1.828 0l-8 18a1 1 0 0 0 1.157 1.376L8 18.281V9a1 1 0 0 1 2 0v9.281l6.758 1.689a1 1 0 0 0 1.156-1.376Z" />
                                </svg>
                                <span class="sr-only">Send message</span>
                            </button>
                        </div>
                    </div>
                </div>

                
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script>

        // 20MBs in bytes
        const TOTAl_ALLOWED_FILE_SIZE = 20000000;
        const LEAST_WORDS_ALLOWED = 4;
        const TOTAL_WORDS_ALLOWED = 100;

        var chatInputElement = document.querySelector("#chat-input");
        var chatDialogContainer = document.querySelector("#chat-dialog-container");
        var chatSubmitElement = document.querySelector("#chat-submit");
        var dialogFormElement = document.querySelector("#dialog-form");
        var attachmentInputElement = document.querySelector("#attachment-input");
        var attachmentsContainer = document.querySelector("#attachments-container");

        binding.enterToTrigger(chatInputElement, dialogSubmitHandler);
        binding.clickToSubmit(chatSubmitElement);
        binding.uploadTrigger(attachmentInputElement, handleAttachment);

        var attachments = [];

        // TODO: no!
        function createReplayElement() {
            var identifier = "dialog-" + utility.shortGUID();

            chatDialogContainer.innerHTML += `
                <div class="relative mb-6 text-left">
                    <div class="text-gray-700">
                        <div class="relative float-left inline-block rounded-md bg-gray-100 py-3 px-4 shadow-md">
                            <p id="${identifier}" class="text-sm"></p>
                        </div>
                    </div>
                    <div class="clear-both flex text-gray-700"></div>
                </div>
            `;

            return document.querySelector(`#${identifier}`);
        }

        function createAttachmentElement() {
            var identifier = "attachment-" + utility.shortGUID();

            attachmentsContainer.innerHTML += `
                        <div id="${identifier}" class="relative mx-1 grow-0 max-w-sm p-1 px-2 bg-white border border-gray-200 rounded-lg shadow">
                            <div class="flex gap-1.5 mb-1">
                                <span id="attachment-name" class="text-xs font-semibold tracking-tight text-gray-900"></span>
                                <button id="drop-attachment" type="button" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-sm text-sm w-3 h-3 ml-auto inline-flex justify-center items-center" data-modal-hide="staticModal">
                                    <svg class="w-2 h-2" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
                                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6" />
                                    </svg>
                                    <span class="sr-only">Close modal</span>
                                </button>
                            </div>
                            <p id="attachment-size" class="text-xs text-gray-500"></p>
                        </div>
                    `;

            return document.querySelector(`#${identifier}`);
        }

        function createAndBuildAttachmentsChat(){
            var containerIdentifier = "chat-attachment-container-" + utility.shortGUID();

            chatDialogContainer.innerHTML += `<div id="${containerIdentifier}" class="flex flex-row-reverse p-2"></div>`;

            var containerElement = document.querySelector(`#${containerIdentifier}`);

            for(attachment of attachments){
                var identifier = "chat-attachment-" + utility.shortGUID();

                containerElement.innerHTML += `
                        <div id="${identifier}" class="relative mx-1 grow-0 max-w-[8rem] min-w-[4rem] p-1 px-2 bg-white border border-gray-200 rounded-lg shadow">
                            <div class="flex gap-1.5 mb-1" >
                                <span id="attachment-name" class="text-xs font-semibold tracking-tight text-gray-900" >${utility.stringEllipsis(attachment.name, 16)}</span>
                            </div>
                            <p id="attachment-size" class="text-xs text-gray-500">${utility.sizeToReadableString(attachment.size)}</p>
                        </div>
                    `;
            }
        }

        function resetDialog() {
            chatSubmitElement.disabled = false;
        }

        function handleAttachment(event){
            chatSubmitElement.disabled = true;

            var files = event.target.files;
            var totalSize = 0;

            for (var file of [...files, ...attachments]) {
                totalSize += file.size;

                if(totalSize >= TOTAl_ALLOWED_FILE_SIZE){
                    notification.error("Nope, attachments limit is 20MB");
                    chatSubmitElement.disabled = false;

                    return;
                }
            }

            for (var file of files) {
                var attachmentElement = createAttachmentElement();

                attachments.push(file);

                attachmentElement.querySelector("#attachment-size").innerHTML = utility.sizeToReadableString(file.size);
                attachmentElement.querySelector("#attachment-name").innerHTML = utility.stringEllipsis(file.name, 10);

                (function(context, currentFile){
                    context.querySelector("#drop-attachment").addEventListener("click", function (event) {
                        attachments = attachments.filter(function (attachment) {
                            return currentFile.name !== attachment.name;
                        });
                        context.remove();
                    });
                })(attachmentElement, file);

                attachmentsContainer.appendChild(attachmentElement);
            }

            chatSubmitElement.disabled = false;
        }

        function dialogSubmitHandler(event) {
            if (chatSubmitElement.disabled) return;

            if (!utility.wordCount(chatInputElement.value) < LEAST_WORDS_ALLOWED) {
                notification.information(`Enter at least ${LEAST_WORDS_ALLOWED + 1} words!`);
                return;
            }

            if (!utility.wordCount(chatInputElement.value) > TOTAL_WORDS_ALLOWED) {
                notification.information(`Enter less than ${TOTAL_WORDS_ALLOWED} words!`);
                return;
            }

            var userInput = chatInputElement.value;

            chatInputElement.value = "";
            chatSubmitElement.disabled = true;

            partialViewLoader.appendTo("Chat/Replay/_UserReplay", userInput, chatDialogContainer)
                .then(_ => {
                    createAndBuildAttachmentsChat();
                    getStreamReplay(userInput);
                });
        }

        function getReplay(message) {
            var replayElement = createReplayElement();

            fetch("http://localhost:5027/api/GPT/Replay", {
                method: 'POST',
                headers: {
                    'Accept': 'application/json; charset=utf-8',
                    'Content-Type': 'application/json;charset=UTF-8'
                },
                body: JSON.stringify({
                    message: message,
                })
            }).then(response =>
                response.text()
            ).then(response => {
                replayElement.innerHTML += " " + response;
                resetDialog();
            }).catch((error) => {
                resetDialog();
                console.error(error);
            });
        }

        async function getStreamReplay(message) {
            var replayElement = createReplayElement();

            try {
                const response = await fetch("http://localhost:5027/api/GPT/StreamReplay", {
                    method: 'POST',
                    headers: {
                        'Accept': 'application/json; charset=utf-8',
                        'Content-Type': 'application/json;charset=UTF-8',
                        'Connection': 'keep-alive'
                    },
                    body: JSON.stringify({
                        message: message,
                    }),
                });

                const reader = response.body.getReader();
                while (true) {
                    const { done, value } = await reader.read();
                    var decodedValue = new TextDecoder().decode(value).trim();

                    replayElement.innerHTML += " " + decodedValue;

                    if (done) {
                        chatSubmitElement.disabled = false;
                        break;
                    }
                }
            } catch (error) {
                resetDialog();
                console.log('error', error);
            }
        }

    </script>
}