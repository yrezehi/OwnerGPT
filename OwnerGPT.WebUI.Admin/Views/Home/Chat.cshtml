@{
    ViewData["Title"] = "Chat";
}

<div class="relative rounded-lg overflow-hidden shadow-lg bg-white h-full">
    <div class="sticky top-0 z-50 bg-[#f2f2f2] border-b border-gray-300 py-5 px-8 text-left text-gray-800">
        <h3 class="inline-block py-1 text-left"><span class="text-indigo-600">Agent #5235</span> - External Portal</h3>
    </div>
    <div id="chat-dialog-container" class="relative flex-grow px-8 pt-8 text-left text-gray-700 mb-[5rem]">
        @await Html.PartialAsync("Chat/Replay/_UserReplay", "Hi you!")

        @await Html.PartialAsync("Chat/Replay/_SystemReplay", "Hi!")
    </div>
    <div class="absolute w-[100%] bottom-0 text-left text-gray-700 p-4">
        <form id="dialog-form">
            <label for="chat" class="sr-only">Your message</label>
            <div class="flex items-center px-3 py-2 bg-gray-100 rounded-lg">
                <button type="button" class="inline-flex justify-center p-2 text-gray-500 rounded-lg cursor-pointer hover:text-gray-900 hover:bg-gray-100">
                    <svg class="w-5 h-5 stroke-current" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M.188 5H5V.13a2.96 2.96 0 0 0-1.293.749L.879 3.707c-.358.362-.617.81-.753 1.3C.148 5.011.166 5 .188 5ZM14 8a6 6 0 1 0 0 12 6 6 0 0 0 0-12Zm2 7h-1v1a1 1 0 0 1-2 0v-1h-1a1 1 0 0 1 0-2h1v-1a1 1 0 0 1 2 0v1h1a1 1 0 0 1 0 2Z" />
                        <path d="M6 14a7.969 7.969 0 0 1 10-7.737V2a1.97 1.97 0 0 0-1.933-2H7v5a2 2 0 0 1-2 2H.188A.909.909 0 0 1 0 6.962V18a1.969 1.969 0 0 0 1.933 2h6.793A7.976 7.976 0 0 1 6 14Z" />
                    </svg>
                    <span class="sr-only">Upload image</span>
                </button>
                <textarea id="chat-input" rows="1" class="block min-h-[75px] resize-none mx-4 p-2.5 w-full text-sm text-gray-900 bg-white rounded-lg border-0 focus:ring-blue-500 focus:border-blue-500" placeholder="Your message..."></textarea>
                <button id="chat-submit" type="button" class="inline-flex justify-center p-2 text-indigo-500 rounded-full cursor-pointer hover:bg-blue-100">
                    <svg class="w-5 h-5 rotate-90" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 18 20">
                        <path d="m17.914 18.594-8-18a1 1 0 0 0-1.828 0l-8 18a1 1 0 0 0 1.157 1.376L8 18.281V9a1 1 0 0 1 2 0v9.281l6.758 1.689a1 1 0 0 0 1.156-1.376Z" />
                    </svg>
                    <span class="sr-only">Send message</span>
                </button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        var chatInputElement = document.querySelector("#chat-input");
        var chatDialogContainer = document.querySelector("#chat-dialog-container");
        var chatSubmitElement = document.querySelector("#chat-submit");
        var dialogFormElement = document.querySelector("#dialog-form");

        keyboard.enterToTrigger(chatInputElement, dialogSubmitHandler);

        // TODO: no!
        function createReplayElement() {
            var identifier = "dialog-" + Math.random().toString(36).slice(-6);

            chatDialogContainer.innerHTML += `
                        <div class="relative mb-6 text-left">
                            <div class="text-gray-700">
                                <div class="relative float-left inline-block rounded-md bg-gray-100 py-3 px-4">
                                    <p id="${identifier}" class="text-sm"></p>
                                </div>
                            </div>
                            <div class="clear-both flex text-gray-700"></div>
                        </div>
                    `;

            return document.querySelector(`#${identifier}`);
        }

        function dialogSubmitHandler(event) {
            if (!chatInputElement.value) return;

            chatInputElement.value = ""

            partialViewLoader.appendTo("Chat/Replay/_UserReplay", chatInputElement.value, chatDialogContainer)
                .then(_ =>
                    getStreamReplay(chatInputElement.value)
                );

        }

        function getReplay(message){
            var replayElement = createReplayElement();

            fetch("http://localhost:5027/api/GPT/Replay", {
                method: 'POST',
                headers: {
                    'Accept': 'application/json; charset=utf-8',
                    'Content-Type': 'application/json;charset=UTF-8'
                },
                body: JSON.stringify({
                    message: message,
                })
            }).then(response => 
                response.text()
            ).then(response => {
                replayElement.innerHTML += " " + response;
            }).catch((error) => {
                console.log(error)
            });
        }

        async function getStreamReplay(message) {
            chatSubmitElement.disabled = true;

            var replayElement = createReplayElement();

            try {
                const response = await fetch("http://localhost:5027/api/GPT/StreamReplay", {
                    method: 'POST',
                    headers: {
                        "Connection": "keep-alive"
                    },
                });

                const reader = response.body.getReader();
                while (true) {
                    const { done, value } = await reader.read();
                    var decodedValue = new TextDecoder().decode(value).trim();

                    replayElement.innerHTML += " " + decodedValue;

                    if (done) {
                        chatSubmitElement.disabled = false;
                        alert("Completed!");
                        break;
                    }
                }
            } catch (error) {
                chatSubmitElement.disabled = false;
                console.log('error', error);
            }
        }

    </script>
}