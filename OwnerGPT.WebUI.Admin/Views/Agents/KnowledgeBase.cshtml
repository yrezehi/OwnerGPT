@model List<OwnerGPT.Models.Agents.AgentDocument>

@{
    ViewData["Title"] = "Knowledge Base";
}

<div class="relative rounded-lg overflow-hidden box-shadow bg-white py-5 px-6 my-4">
    <div class="relative bg-white sm:rounded-1xl ">
        <div class="grid sm:grid-cols-2 gap-4">
            <div class="border-b sm:border-b-0 sm:border-r relative pr-4">
                <div class="mb-4 lg:mb-0 pb-8 pt-3">
                    <h3 class="mb-2 text-xl font-bold text-gray-900">Knowledge Base</h3>
                    <span class="text-base font-normal text-gray-500">Modify agent's knowledge base</span>
                </div>
                <div class="mt-4">
                    <ul id="attachments-container" class="grid grid-cols-1 w-full gap-2 mb-1">
                        <li>
                            <div for="hosting-small" class="inline-flex items-center justify-between w-full p-5 text-gray-500 bg-white border border-gray-200 rounded-lg cursor-pointer peer-checked:border-indigo-600 peer-checked:text-indigo-600 hover:text-gray-600 hover:bg-gray-50">
                                <div class="block">
                                    <div class="w-full text-base font-semibold">No content uploaded yet!</div>
                                </div>
                                <svg class="w-5 h-5 ml-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                                    <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5ZM10 15a1 1 0 1 1 0-2 1 1 0 0 1 0 2Zm1-4a1 1 0 0 1-2 0V6a1 1 0 0 1 2 0v5Z" />
                                </svg>
                            </div>
                        </li>
                    </ul>
                    <div class="sm:col-span-2 mt-5">
                        <label for="attachment-input" class="block text-sm font-semibold leading-6 text-gray-900">Upload file<span class="text-xs text-gray-500"> (optional) </span></label>
                        <label for="attachment-input" class="block text-sm font-semibold leading-6 text-gray-900 mt-1 mb-3"><span class="text-xs text-gray-500">(drop files to interact with it)</span></label>
                        <div id="drag-drop-area" class="flex items-center justify-center w-full">
                            <label for="attachment-input" class="flex flex-col items-center justify-center w-full h-64 border-2 border-gray-300 border-dashed rounded-lg cursor-pointer bg-gray-50 hover:bg-gray-100">
                                <div class="flex flex-col items-center justify-center pt-5 pb-6">
                                    <svg class="w-8 h-8 mb-4 text-gray-500" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 16">
                                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 13h3a3 3 0 0 0 0-6h-.025A5.56 5.56 0 0 0 16 6.5 5.5 5.5 0 0 0 5.207 5.021C5.137 5.017 5.071 5 5 5a4 4 0 0 0 0 8h2.167M10 15V6m0 0L8 8m2-2 2 2" />
                                    </svg>
                                    <p class="mb-2 text-sm text-gray-500"><span class="font-semibold">Click to upload</span> or drag and drop</p>
                                    <p class="text-xs text-gray-500">PDF (MAX. 10MB each)</p>
                                </div>
                                <input id="attachment-input" name="attachments" type="file" class="hidden" multiple />
                            </label>
                        </div>
                    </div>

                    <div class="sm:col-span-2 mt-5">
                        <label for="urls" class="block text-sm font-semibold leading-6 text-gray-900">Scrape a webpage <span class="text-xs text-gray-500"> (optional) </span></label>
                        <label for="urls" class="block text-sm font-semibold leading-6 text-gray-900 mt-1"><span class="text-xs text-gray-500">(to be interacted with, enter single or more links 5 MAX seperated by spaces or new lines)</span></label>
                        <div class="mt-2.5">
                            <textarea placeholder="https://example.com https://another-example.com" name="urls" id="urls" rows="4" class="bg-gray-100 cursor-not-allowed block w-full rounded-md border-0 px-3.5 py-2 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6" readonly></textarea>
                        </div>
                    </div>
                </div>
            </div>
            <div class="px-2">
                <div class="pb-4 pt-3">
                    <h3 class="text-xl font-bold text-gray-900">Preview</h3>
                </div>
                <div class="mt-4">
                    <div class="block p-4 bg-gray-50 border-0 rounded-lg">
                        <p class="font-normal text-gray-700">
                            No content to preview, please pick a content from left-hand side!
                        </p>
                    </div>
                </div>
            </div>
        </div>        
        <a href="@Url.Action("Configure", "Agents", new {agentId = 1})" class="mb-1 mt-8 block w-full rounded-md bg-indigo-600 px-3.5 py-2.5 text-center text-sm font-semibold text-white shadow-sm hover:bg-indigo-800 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">Go Back</a>
    </div>
</div>

@section Scripts {
    <script>
        const TOTAl_ALLOWED_FILE_SIZE = 20000000;
        var attachmentInputElement = document.querySelector("#attachment-input");
        var attachmentsContainerElement = document.querySelector("#attachments-container");
        var dragAreaElement = document.querySelector("#drag-drop-area");

        binding.uploadTrigger(attachmentInputElement, handleAttachment);
        binding.dropTrigger(dragAreaElement, handleFilesDrop);

        var attachments = [];


        function createAttachmentElement() {
            var uniqueIdentifier = `file-${utility.shortGUID()}`;

            return dom.createElement(`
                <li>
                   <input type="radio" id="${uniqueIdentifier}" name="${uniqueIdentifier}" value="${uniqueIdentifier}" class="hidden peer" >
                    <label for="${uniqueIdentifier}" class="w-full inline-flex flex-col items-center bg-white border border-gray-200 rounded-lg cursor-pointer px-5 py-4 peer-checked:border-indigo-600 peer-checked:text-indigo-600 hover:text-gray-600 hover:bg-gray-50 peer-checked:border-blue-600 peer-checked:text-blue-600 hover:text-gray-600 hover:bg-gray-100">
                      <div class="items-center justify-between w-full text-gray-500">
                         <div class="block">
                            <div class="w-full text-base font-semibold">
                               <span class="attachment-name font-bold">Fetching name...</span>
                               <div class="file-status inline">
                                  <span class="text-sm text-indigo-800 font-mono bg-indigo-100 inline rounded-full px-2 align-top float-right animate-pulse">Processing</span>
                               </div>
                            </div>
                         </div>
                         <div class="attachment-size w-full text-xs mt-2">Estimating size...</div>
                      </div>
                      <div class="progress-bar-container w-full bg-gray-200 rounded-full h-2.5 mt-3">
                         <div class="progress-bar bg-indigo-600 h-2.5 rounded-full" style="width: 0%"></div>
                      </div>
                   </label>
                </li>
            `);
        }

        async function streamUpload(file, context, callback) {
            const formData = new FormData();
            formData.append("file", file);

            try {
                const response = await fetch("http://localhost:5027/AgentDocuments", {
                    method: 'POST',
                    headers: {
                        "Connection": "keep-alive"
                    },
                    body: formData,
                });

                const reader = response.body.getReader();

                while (true) {
                    const { done, value } = await reader.read();
                    var progress = new TextDecoder().decode(value).trim();

                    context.style.width = progress + "%";

                    if (done) {
                        if(callback)
                            callback();
                        break;
                    }
                }
            } catch (error) {
                notification.error(error);
            }
        }

        function handleAttachment(event) {
            handleAttachmentUpload(event.target.files);

            event.preventDefault();
        }

        function handleFilesDrop(event) {
            handleAttachmentUpload(Array.from(event.dataTransfer.files));
            
            event.preventDefault();
        }

        function createReadyFileStatusElement() {
            return dom.createElement(`
                <span class="text-sm text-teal-800 font-mono bg-teal-100 inline rounded-full px-2 align-top float-right animate-pulse">Ready</span>
            `);
        }

        function handleAttachmentUpload(files){
            if (!isValidAttachments(files)) { return; }

            for (var file of files) {
                var attachmentElement = createAttachmentElement();

                attachments.push(file);

                attachmentElement.querySelector(".attachment-size").innerHTML = utility.sizeToReadableString(file.size);
                attachmentElement.querySelector(".attachment-name").innerHTML = utility.stringEllipsis(file.name, 50);

                (function (context, currentFile) {
                    streamUpload(file, context.querySelector(".progress-bar"), function () {
                        var fileStatusElement = context.querySelector(".file-status");
                        
                        fileStatusElement.innerHTML = "";
                        fileStatusElement.appendChild(createReadyFileStatusElement());

                        var progressbarContainer = context.querySelector(".progress-bar-container");

                        progressbarContainer.remove();
                    });
                })(attachmentElement, file);

                attachmentsContainerElement.appendChild(attachmentElement);
            }
        }

        function isValidAttachments(files) {
            var totalSize = 0;

            for (var file of [...files, ...attachments]) {
                totalSize += file.size;

                if (totalSize >= TOTAl_ALLOWED_FILE_SIZE) {
                    notification.error("Nope, attachments limit is 20MB");
                    return false;
                }
            }

            return true;
        }

    </script>
}