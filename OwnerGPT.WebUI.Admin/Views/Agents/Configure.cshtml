@model Agent

@{
    ViewData["Title"] = "Configure Agent";
}

<div class="relative rounded-lg overflow-hidden box-shadow bg-white py-5 px-8 my-4">
    <div class="mb-4 lg:mb-0 pb-5 pt-3">
        <h3 class="mb-2 text-xl font-bold text-gray-900">Agents</h3>
        <span class="text-base font-normal text-gray-500">Configure agent's settings</span>
    </div>
    <form id="agent-configuration-form" action="@Url.Action("Update", "Agents")" method="post" class="mx-auto mt-4">
        <div class="grid grid-cols-1 gap-x-8 gap-y-6 sm:grid-cols-2">
            <input name="id" value="@Model.Id" hidden />

            <div class="sm:col-span-2">
                <label for="name" class="block text-sm font-semibold leading-6 text-gray-900">Name</label>
                <label for="name" class="block text-sm font-semibold leading-6 text-gray-900 mt-1">
                    <span class="text-xs text-gray-500">(name of the agent)</span>
                </label>
                <div class="mt-2.5">
                    <input value="@Model.Name" type="text" name="name" id="name" autocomplete="name" class="bg-gray-100 cursor-not-allowed block w-full rounded-md border-0 px-3.5 py-2 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6" readonly>
                </div>
            </div>

            <div class="sm:col-span-2">
                <label for="description" class="block text-sm font-semibold leading-6 text-gray-900">Description</label>
                <label for="description" class="block text-sm font-semibold leading-6 text-gray-900 mt-1"><span class="text-xs text-gray-500">(description for internal refrence)</span></label>
                <div class="mt-2.5">
                    <input value="@Model.Description" type="text" name="description" id="description" autocomplete="organization" class="bg-gray-100 cursor-not-allowed block w-full rounded-md border-0 px-3.5 py-2 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6" readonly>
                </div>
            </div>

            <div class="sm:col-span-2">
                <label for="introduction" class="block text-sm font-semibold leading-6 text-gray-900">Introduction</label>
                <label for="introduction" class="block text-sm font-semibold leading-6 text-gray-900 mt-1"><span class="text-xs text-gray-500">(welcoming statement to be printed to user's dialog as welcome)</span></label>
                <div class="mt-2.5">
                    <input value="@(@Model.Introduction ?? $"Hi There! I'm your personal assistant {Model.Name}, ask me anything!")" type="text" name="introduction" id="introduction" autocomplete="organization" class="block w-full rounded-md border-0 px-3.5 py-2 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6" required>
                </div>
            </div>

            <div class="sm:col-span-2">
                <label for="instruction" class="block text-sm font-semibold leading-6 text-gray-900">Instruction</label>
                <label for="instruction" class="block text-sm font-semibold leading-6 text-gray-900 mt-1"><span class="text-xs text-gray-500">(define bot's identity and how the bot should react)</span></label>
                <div class="mt-2.5">
                    <textarea name="instruction" id="instruction" rows="4" class="block w-full rounded-md border-0 px-3.5 py-2 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6" required>@(Model.Instruction ?? $"You are an AI assistant called {Model.Name} that helps people find information and responds in rhyme. If the user asks you a question you don't know the answer to, say so.")</textarea>
                </div>
            </div>

            <div class="sm:col-span-2">
                <label class="relative inline-flex items-center cursor-pointer">
                    <input name="@Model.Active" type="checkbox" value="true" class="sr-only peer">
                    <div class="w-9 h-5 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-4 after:w-4 after:transition-all peer-checked:bg-blue-600"></div>
                    <span class="ml-3 text-sm text-sm text-gray-600">By selecting this, you activate the agent to the public</span>
                </label>
            </div>
        </div>
        <div class="mt-10">
            <button id="submit-configuration" type="button" class="block w-full rounded-md bg-indigo-600 px-3.5 py-2.5 text-center text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">Configure</button>
        </div>
    </form>
</div>

@section Scripts {
    <script>
        var submitConfigurationElement = document.querySelector("#submit-configuration");

        binding.clickToTrigger(submitConfigurationElement, configurationSubmitHandler);



        function configurationSubmitHandler(event) {
            const formAttributes = Object.fromEntries(new FormData(document.querySelector("#agent-configuration-form")));

            var formToSubmit = new FormData();

            formToSubmit.append("Agent.Id", formAttributes["id"]);
            formToSubmit.append("Agent.Description", formAttributes["description"]);
            formToSubmit.append("Agent.Introduction", formAttributes["introduction"]);
            formToSubmit.append("Agent.Instruction", formAttributes["instruction"]);

            fetch("@Url.Action("Update", "Agents")", {
                method: 'POST',
                body: formToSubmit
            }).then(_ => {
                window.location.href = "@Url.Action("Index", "Agents")";
            }).catch((error) => {
                console.error(error);
            });
        }

    </script>
}